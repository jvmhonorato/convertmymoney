1: npm init

2: criar o .gitignore

3: criar index.js

4: instalar express: npm install express ejs ,npm install express-ejs-layouts

5: em index.js importar express e demais imports, criar estrutura inicial, por pra escultar na porta 3000

6: criar o statics files , template engines and Navigation routes

7:criar pasta public e dentro dela pasta css com o arquivo styles.css dentro

8:linkar css em header.ejs a style.css, e configurar ao seu gosto lincar uma img da logo ao header

9:separar o footer e o header em dois arquivos  depois importar pra home e outras páginas com a tag <%- include(') %>

10: em home.ejs inseir 3 <input> e 1 <button> dentro do <form method="GET" action="/cotacao">

11: criar lib/convert.js e nela criar funções pra converter e pra retonar 0 depois da virgula

12:ir no index e add mais uma navigation route /cotacao

13: importar o convert, configurar a rota cotacao pra receber a função conevert e seus parâmetros

14:criar novo arquivo da cotacao.ejs onde vai renderizar os resultados 

15:em convert.js pasei um parseFloat em na função toMoney eno index.js na rota cotação converti todos o valores pra toMoney tambem

16: pra tratar a função pra caso retornar vazio: na rota cotacao em index.js add um if else, depois configura o tratamento de render tambem em cotacao.ejs usando <%if else%> desse jeito e pot ultimom em index.js add error: false

17: ADICIONANDO TEST UNITÁRIO teste unitário só faz durasnte o processo de desenvolvimento nunca quando está em produção

18:: npm install --save-dev jest e add "test": "jest",no script de package.json. depois de dar npm test pra rodar o test

19:criar arquivo com o mesmo nome do arquivo que será testado: no caso criar o convert.test.js, dentro dele importar o convert.js e criar tests pra depois rodar o test no console se na função ou no est tiver diferença entre o recebido e ou experado o teste vai falhar. o test é a representação do arquivo filho que vai rodar o codigo do arquivo pai se um dos dois tiverem divergente o teste vai mostrar

20:criar vercel.json e add build e routs politica de segurnaçã da vercel;

21: Pra buscar cotação automatica seguir os procedimentos:

22: instalar o axios: npm install axios

23: criar primeiramene arquivo teste-api.js pra testar em seguida criar em lib/api.bcb.js 

24: configurar toda a API com funções async e depois exportar o modulos

25: em index.js onde estão as rotas importar os modulos e configurar a rota /home com uma função async,  estanciar o modulo que foi importado e depois chamar essa const no segundo parâmentro de res.render

26:em seguida em home.ejs no input contacao add value="value="<%= cotacao %>" pra renderizar o valor da cotacao automaticamente

27: em api.bcb.js adicionar um try{}catch{} na função async retornado vazio pra não quebra o código

28: testanto app com jest: criamos o api.bcb.test.js pra testa a api

29: EM package.json adicionamos   "jest":{
    "collectCoverage":true
  } 